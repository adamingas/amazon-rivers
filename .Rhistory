riverdf100s.css %>%hist(rowSums({.}))
riverdf100s.css %>%(rowSums({.}))%>%hist()
riverdf100s.css %>%(rowSums())%>%hist()
riverdf100s.css %>%rowSums()%>%hist()
riverdf100s.css %>%rowSums()%>%sumary()
riverdf100s.css %>%rowSums()%>%sumarry()
summary()
riverdf100s.css %>%rowSums()%>%summary()
riverdf100.css %>%rowSums()%>%summary()
wwfdf[index_of_riverotus_samples]
wwfdf[index_of_riverotus_samples,]
riverdf100s %>%rowSums()%>%summary()
riverdf100 %>%rowSums()%>%summary()
riverdf100s.csslog = cssnormalisation(riverdf100s,log=TRUE)
riverdf100s.css %>%rowSums()%>%summary()
riverdf100s.csslog %>%rowSums()%>%summary()
riverdf100.csslog %>%rowSums()%>%summary()
log
log(121240)
log(121240,base = 2)
log(121240,base = 3)
log(121240 )/378
riverdf100.csslog %>%rowSums()%>%hist()
riverdf100s.csslog %>%rowSums()%>%hist()
riverdf100s.css %>%rowSums()%>%hist()
riverdf100.css %>%rowSums()%>%hist()
riverdf100.css %>%colSums()%>%hist()
riverdf100.css %>%colSums()%>%hist()
riverdf100s.css %>%colSums()%>%hist()
#Removing samples with less than 10000 read counts
index_of_riverotus_samples =(rowSums(riverdf) <10000)
index_of_riverotus_samples
sum(index_of_riverotus_samples
)
(colSums(riverdf)<100)
(rowSums(otudf)<100)
which(rowSums(otudf)<100)
which(rowSums(otudf)<10000)
which(rowSums(riverdf)<10000)
wwfdf[(rowSums(riverdf)<10000)
]
wwfdf[(rowSums(riverdf)<10000),]
write.csv(riverdf,"riverdf")
write.csv(riverdf.css,"riverdfcss")
write.csv(riverdf.csslog,"riverdfcsslog")
write.csv(riverdf100s,"riverdf100s")
write.csv(riverdf100s.css,"riverdf100scss")
write.csv(riverdf100s.csslog,"riverdf100scsslog")
wwfdf$ID
?rrarefy
###############
# Normalising #
###############
rrarefy(otudf)
###############
# Normalising #
###############
rrarefy(otudf,sample = 10000)
###############
# Normalising #
###############
rrarefy(otudf.min,sample = 10000)
# there are 7 samples that contain less than 10000 reads, we can
# exclude them to see how clustering, and ordination change
exclude <-  !( rownames(otudf) %in% names(which(rowSums(otudf)<10000)))
otudf.min <- otudf[exclude,]
###############
# Normalising #
###############
rrarefy(otudf.min,sample = 10000)
###############
# Normalising #
###############
rrarefy(riverdf100s,sample = 10000)
?diversity
library(fossil)
chao1
install.packages("fossil")
library(fossil)
###############
# Normalising #
###############
chao1(rrarefy(riverdf100s,sample = 10000))
###############
# Normalising #
###############
chao1(rrarefy(riverdf100s,sample = 10000),taxa.row = FALSE)
a<-matrix(c(0,5,1,1,2,0,0,1,0,0,8,45),4,3)
chao1(a)
chao2(a)
estimateR(otudf)
estimateR(otudf.T)
estimateR(t(otudf))
estimateR((otudf))
estimateR((otudf.min))
###############
# Normalising #
###############
estimateR(rrarefy(riverdf100s,sample = 10000),taxa.row = FALSE)
?estimate#r
?estimateR
fullotudata = read.csv(header = FALSE,file = "fullotu.csv",stringsAsFactors = F)
fullotudata
fullotutable <- fullotudata[-c(2,3),-seq(2,8)]
fullotutable
riverotus = read.csv(header = FALSE,file = "riverotus.csv",stringsAsFactors = F)
data.frame(clnames)
data.frame(col)
fullotutable <- fullotudata[-c(1,2,3),-seq(1,8)]
fullotudata
fullotutable
clear
clear()
fullotutable
data.frame(t(fullotutable))
fullotudata[1,-seq(1,8)]
data.frame(t(fullotutable),row.names = fullotudata[1,-seq(1,8)])
fullotudata[c(1,2),-seq(1,8)]
fullotudata[fullotudata[2,] == "1D"]
fullotudata[,fullotudata[2,] == "1D"]
fullotudata[1,fullotudata[2,] == "1D"] == "3-s01d"
data.frame(t(fullotutable),row.names = fullotudata[c(1,2),-seq(1,8)])
fullotudf =data.frame(t(fullotutable),row.names = fullotudata[c(1,2),-seq(1,8)])
fullotudata[-c(1,2,3),1]
colnames(fullotudf) = fullotudata[-c(1,2,3),1]
fullotudf
fullotudf[1,1]
fullotudf =data.frame(t(fullotutable),row.names = fullotudata[c(1,2),-seq(1,8)],stringsAsFactors = FALSE)
colnames(fullotudf) = fullotudata[-c(1,2,3),1]
fullotudf[1,1]
fullotutable
fullotutable %>% as.numeric
fullotutable %<>% as.numeric
fullotutable[,] %<>% as.numeric
fullotutable[,] %<>% sapply(,as.numeric)
fullotutable[,] %<>% sapply(,FUN =  as.numeric)
fullotutable[,] %<>% sapply({.},FUN =  as.numeric)
fullotutable
fullotutable[1,1]
fullotudf =data.frame(t(fullotutable),row.names = fullotudata[c(1,2),-seq(1,8)],stringsAsFactors = FALSE)
colnames(fullotudf) = fullotudata[-c(1,2,3),1]
fullotudf[1,1]
colSums(fullotudf)<100
sum(colSums(fullotudf)<100)
sum(colSums(fullotudf)<10)
summary(colSums(fullotudf))
fullotudf100 = fullotudf[,-(colSums(fullotudf)<100)]
fullotudf100 = fullotudf[,-(colSums(fullotudf)<100)]
rowSums(fullotudf)
summaryrowSums(fullotudf)
summary(rowSums(fullotudf))
index_of_fullotu_samples =(rowSums(fullotudf) <10000)
index_of_fullotu_samples
fullotudf =data.frame(t(fullotutable),row.names = fullotudata[c(1),-seq(1,8)],stringsAsFactors = FALSE)
colnames(fullotudf) = fullotudata[-c(1,2,3),1]
fullotudata[1,fullotudata[2,] == "1D"] == "3-s01d"
fullotudf =data.frame(t(fullotutable),row.names = fullotudata[c(1),-seq(1,8)],stringsAsFactors = FALSE)
fullotudata[1,fullotudata[2,] == "1D"] = "3-s01d"
fullotudf =data.frame(t(fullotutable),row.names = fullotudata[c(1),-seq(1,8)],stringsAsFactors = FALSE)
colnames(fullotudf) = fullotudata[-c(1,2,3),1]
fullotudf100 = fullotudf[,-(colSums(fullotudf)<100)]
index_of_fullotu_samples =(rowSums(fullotudf) <10000)
index_of_fullotu_samples
sum(index_of_fullotu_samples)
fullotudf100s = fullotudf100[!index_of_fullotu_samples,]
# Normalisation using CSS abd metaseq package
cssnormalisation <- function(dataframe,log=FALSE){
# Normalises dataframe
MRObject <-newMRexperiment(t(dataframe))
MRObject.css<-cumNorm(MRObject, p = cumNormStat(MRObject))
dataframe.css <- t(MRcounts(MRObject.css,norm = TRUE,log = log))
return(dataframe.css)
}
# Fullotu cssnormalisation and saving
fullotudf.css = cssnormalisation(fullotudf)
hist(rowSums(fullotudf.css))
summary(rowSums(fullotudf.css))
fullotudf.csslog = cssnormalisation(fullotudf,log = T)
cssnormalisation(fullotudf[1:100,])
cssnormalisation(fullotudf[1:100,]) == fullotudf.css[1:100,]
fullotudf.css[1:100,]
fullotudf.css[2:100,]
cssnormalisation(fullotudf[1:100,]) == fullotudf.css[1:1,]
sum(cssnormalisation(fullotudf[1:100,]) == fullotudf.css[1:100,])
sum(cssnormalisation(fullotudf[1:100,]) != fullotudf.css[1:100,])
sum(cssnormalisation(fullotudf[1:20,]) != fullotudf.css[1:20,])
sum(cssnormalisation(fullotudf[1:1,]) != fullotudf.css[1:1,])
sum(cssnormalisation(fullotudf[1:1,]) == fullotudf.css[1:1,])
sizeD(fullotudf)
size(fullotudf)
shape(fullotudf)
(fullotudf)
fullotudf10s.css = cssnormalisation(fullotudf100s)
fullotudf10s.csslog = cssnormalisation(fullotudf100s,log=T)
View(fullotudf)
fullotudf10s.css = cssnormalisation(fullotudf100s)
fullotudf10s.csslog = cssnormalisation(fullotudf100s,log=T)
write.csv(fullotudf,"fullotudf")
write.csv(fullotudf.css,"fullotudfCss")
write.csv(fullotudf.csslog,"fullotudfCssLog")
write.csv(fullotudf100s,"fullotudf100s")
write.csv(fullotudf100s.css,"fullotudf100sCss")
write.csv(fullotudf100s.csslog,"fullotudf100sCssLog")
fullotudf10s.css = cssnormalisation(fullotudf100s)
fullotudf10s.csslog = cssnormalisation(fullotudf100s,log=T)
write.csv(fullotudf100s.css,"fullotudf100sCss")
fullotudf100s.csslog
fullotudf10s.css
fullotudf100s.css = cssnormalisation(fullotudf100s)
fullotudf100s.csslog = cssnormalisation(fullotudf100s,log=T)
write.csv(fullotudf100s.css,"fullotudf100sCss")
write.csv(fullotudf100s.csslog,"fullotudf100sCssLog")
is.na(fullotudf)
any(is.na(fullotudf))
all(is.finite(fullotudf))
all(is.numeric(fullotudf))
fullotudf %<>% as.numeric()
fullotudf <- sapply(fullotudf,as.numeric)
all(is.numeric(fullotudf))
fulotudf.css
fullotudf.css
all(is.numeric(fullotudf.css))
sapply(fullotutable,FUN =  as.numeric)
fullotutable <- sapply(fullotutable,FUN =  as.numeric)
fullotudf =data.frame(t(fullotutable),row.names = fullotudata[c(1),-seq(1,8)],stringsAsFactors = FALSE)
all(is.numeric(fullotudf))
fullotudf %<>% as.numeric
fullotudf[,] <- sapply(fullotudf,as.numeric)
all(is.numeric(fullotudf))
fullotudf[,] <- sapply(fullotudf[,],as.numeric)
all(is.numeric(fullotudf))
as.numeric(fullotudf)
all(is.numeric(otudf))
fullotudf <- sapply(fullotudf,as.numeric)
all(is.numeric(otudf))
as.numeric(fullotudf)
all(is.numeric(fullotudf))
fullotudf =data.frame(t(fullotutable),row.names = fullotudata[c(1),-seq(1,8)],stringsAsFactors = FALSE)
fullotudf <- sapply(fullotudf,as.numeric)
head(fullotudf)
colnames(fullotudf) = fullotudata[-c(1,2,3),1]
riverotus = read.csv(header = FALSE,file = "riverotus.csv",stringsAsFactors = F)
# Fullotu cssnormalisation and saving
fullotudf.css = cssnormalisation(fullotudf)
fullotudf.csslog = cssnormalisation(fullotudf,log = T)
fullotudf100s.css = cssnormalisation(fullotudf100s)
fullotudf100s.csslog = cssnormalisation(fullotudf100s,log=T)
write.csv(fullotudf,"fullotudf")
write.csv(fullotudf.css,"fullotudfCss")
write.csv(fullotudf.csslog,"fullotudfCssLog")
write.csv(fullotudf100s,"fullotudf100s")
write.csv(fullotudf100s.css,"fullotudf100sCss")
write.csv(fullotudf100s.csslog,"fullotudf100sCssLog")
fullotudf =data.frame(t(fullotutable),row.names = fullotudata[c(1),-seq(1,8)],stringsAsFactors = FALSE)
fullotudf <- sapply(fullotudf,as.numeric)
colnames(fullotudf) = fullotudata[-c(1,2,3),1]
row.names(fullotudf)
fullotudf =data.frame(t(fullotutable),row.names = fullotudata[c(1),-seq(1,8)],stringsAsFactors = FALSE)
fullotudf[,] <- sapply(fullotudf[,],as.numeric)
row.names(fullotudf)
fullotudf[,]
colnames(fullotudf) = fullotudata[-c(1,2,3),1]
fullotudf[,] <- sapply(fullotudf[,],as.numeric)
fullotudf[,]
fullotudf[1,1]
typeof(fullotudf)
fullotudf =as.data.frame(t(fullotutable),row.names = fullotudata[c(1),-seq(1,8)],stringsAsFactors = FALSE)
colnames(fullotudf) = fullotudata[-c(1,2,3),1]
fullotudf[,] <- sapply(fullotudf[,],as.numeric)
typeof(fullotudf)
typeof(fullotudf.css)
typeof(fullotudf.csslog)
typeof(otudf)
fullotudf <- sapply(fullotudf,as.numeric)
typeof(fullotudf)
fullotudf
row.names(fullotudf)
fullotutable <- lapply(fullotutable,FUN =  as.numeric)
fullotudata[1,fullotudata[2,] == "1D"] = "3-s01d"
fullotudf =as.data.frame(t(fullotutable),row.names = fullotudata[c(1),-seq(1,8)],stringsAsFactors = FALSE)
fullotudf[2,2]
fullotudata = read.csv(header = FALSE,file = "fullotu.csv",stringsAsFactors = F)
fullotutable <- fullotudata[-c(1,2,3),-seq(1,8)]
fullotutable <- lapply(fullotutable,FUN =  as.numeric)
fullotutable
fullotutable[,] <- lapply(fullotutable[,],FUN =  as.numeric)
fullotutable <- fullotudata[-c(1,2,3),-seq(1,8)]
fullotutable[,] <- lapply(fullotutable[,],FUN =  as.numeric)
fullotutable
fullotudata[1,fullotudata[2,] == "1D"] = "3-s01d"
fullotudf =as.data.frame(t(fullotutable),row.names = fullotudata[c(1),-seq(1,8)],stringsAsFactors = FALSE)
colnames(fullotudf) = fullotudata[-c(1,2,3),1]
fullotudf
row.names(fullotudf)
isNumeric(fullotudf)
is.numeric(fullotudf)
isNumeric(fullotudf)
isNumeric(fullotudf.css)
is.numeric(fullotudf.css)
fullotudf.css
row.names(fullotudf.css)
# Fullotu cssnormalisation and saving
fullotudf.css = cssnormalisation(fullotudf)
row.names(fullotudf.css)
fullotudf.csslog = cssnormalisation(fullotudf,log = T)
fullotudf100s.css = cssnormalisation(fullotudf100s)
fullotudf100s.csslog = cssnormalisation(fullotudf100s,log=T)
write.csv(fullotudf,"fullotudf")
write.csv(fullotudf.css,"fullotudfCss")
write.csv(fullotudf.csslog,"fullotudfCssLog")
write.csv(fullotudf100s,"fullotudf100s")
write.csv(fullotudf100s.css,"fullotudf100sCss")
write.csv(fullotudf100s.csslog,"fullotudf100sCssLog")
row.names(fullotudf100s)
row.names(fullotudf100sCss)
row.names(fullotudf100s.css)
anyNA( fullotudf)
anyNA( fullotudf.css)
is.numeric( fullotudf.css)
is.numeric( fullotudf)
is.integer( fullotudf)
is.integer( fullotudf.css)
is.numeric( fullotudf.css)
fullotudf[1,1]
fullotudf[3,3]
is.character(fullotudf)
glimpse(fullotudf)
glimpse(fullotudf.css)
typeof(fullotudf.css)
typeof(fullotudf)
as.numeric(as.character(fullotudf))
sapply(fullotudf,as.numeric(as.character()))
sapply(fullotudf,as.numeric(as.character))
sapply(fullotudf,function(x) as.numeric(as.character(x)))
sapply(fullotudf,function(x) as.numeric(as.character(x)))[1,]
sapply(fullotudf,function(x) as.numeric(as.character(x)))[2,]
is.numeric(sapply(fullotudf,function(x) as.numeric(as.character(x))))
is.numeric(sapply(fullotudf,function(x) as.numeric((x))))
is.numeric(sapply(fullotudf,function(x) as.numeric(x)))
is.numeric(fullotudf)
row.names(sapply(fullotudf,function(x) as.numeric(as.character(x))))
typeof(sapply(fullotudf,function(x) as.numeric(as.character(x))))
row.names(fullotudf)
fullotudata = read.csv(header = FALSE,file = "fullotu.csv",stringsAsFactors = F)
fullotudata = read.csv(header = FALSE,file = "fullotu.csv",stringsAsFactors = F)
fullotutable <- fullotudata[-c(1,2,3),-seq(1,8)]
fullotutable
row.names(fullotutable)
is.numeric(fullotutable)
is.numeric(otutable)
fullotutable <- sapply(fullotudata[-c(1,2,3),-seq(1,8)],function(x) as.numeric(as.character(x)))
is.numeric(fullotutable)
fullotudf =as.data.frame(t(fullotutable),row.names = fullotudata[1,-seq(1,8)],stringsAsFactors = FALSE)
is.numeric(fullotudf)
is.numeric(fullotutable)
isNumeric(fullotutable)
isNumeric(fullotudf)
colnames(fullotudf) = fullotudata[-c(1,2,3),1]
isNumeric(fullotudf)
otudf <- as.data.frame(x=otutable[,-1],stringsAsFactors=FALSE,row.names = otutable[,1])
otudf
isNumeric(otudf)
isNumeric(wwfdf)
#otudf$ID <- as.character(otudf$ID)
otudf[,]<- sapply(otudf[,], as.numeric)
isNumeric(wwfdf)
isNumeric(otudf)
# Fullotu cssnormalisation and saving
fullotudf.css = cssnormalisation(fullotudf)
fullotudf.csslog = cssnormalisation(fullotudf,log = T)
fullotudf100 = fullotudf[,-(colSums(fullotudf)<100)]
# Three samples with less than 10000 in fullotudf
index_of_fullotu_samples =(rowSums(fullotudf) <10000)
fullotudf100s = fullotudf100[!index_of_fullotu_samples,]
fullotudf100s.css = cssnormalisation(fullotudf100s)
fullotudf100s.csslog = cssnormalisation(fullotudf100s,log=T)
write.csv(fullotudf,"fullotudf")
write.csv(fullotudf.css,"fullotudfCss")
write.csv(fullotudf.csslog,"fullotudfCssLog")
write.csv(fullotudf100s,"fullotudf100s")
write.csv(fullotudf100s.css,"fullotudf100sCss")
write.csv(fullotudf100s.csslog,"fullotudf100sCssLog")
row.names(fullotudf)
fullotudata[1,-seq(1,8)]
fullotudf =as.data.frame(t(fullotutable),row.names = fullotudata[1,-seq(1,8)],stringsAsFactors = FALSE)
row.names(fullotudf)
colnames(fullotudf) = fullotudata[-c(1,2,3),1]
row.names(fullotudf) = fullotudata[1,-seq(1,8)]
fullotudata[1,fullotudata[2,] == "1D"] = "3-s01d"
fullotudf =as.data.frame(t(fullotutable),row.names = fullotudata[1,-seq(1,8)],stringsAsFactors = FALSE)
colnames(fullotudf) = fullotudata[-c(1,2,3),1]
row.names(fullotudf)
isNumeric(fullotudf)
fullotudf100 = fullotudf[,-(colSums(fullotudf)<100)]
# Three samples with less than 10000 in fullotudf
index_of_fullotu_samples =(rowSums(fullotudf) <10000)
fullotudf100s = fullotudf100[!index_of_fullotu_samples,]
# Fullotu cssnormalisation and saving
fullotudf.css = cssnormalisation(fullotudf)
fullotudf.csslog = cssnormalisation(fullotudf,log = T)
fullotudf100s.css = cssnormalisation(fullotudf100s)
fullotudf100s.csslog = cssnormalisation(fullotudf100s,log=T)
write.csv(fullotudf,"fullotudf")
write.csv(fullotudf.css,"fullotudfCss")
write.csv(fullotudf.csslog,"fullotudfCssLog")
write.csv(fullotudf100s,"fullotudf100s")
write.csv(fullotudf100s.css,"fullotudf100sCss")
write.csv(fullotudf100s.csslog,"fullotudf100sCssLog")
row.names(fullotudf)
is.numeric(fullotudf)
is.numeric(fullotudf[1,])
is.numeric(fullotudf[1,1])
is.numeric(fullotudf[2,1])
is.numeric(fullotudf.css[1,])
is.numeric(fullotudf[1,])
is.numeric(fullotudf[2,])
is.numeric(fullotudf[,1])
fullotudata = read.table(header = FALSE,file = "fullotu.csv",sep = ",",stringsAsFactors = F)
fullotutable = t(fullotudata)[,-seq(1,8)]
fullotutable
otudata = read.table(file = "WWF_Peru_for_BenCalderhead.csv",sep = ",",stringsAsFactors = FALSE)
otutable<- t(otudata)[-seq(1,8),]
otutable
fullotudata = read.table(header = FALSE,file = "fullotu.csv",sep = ",",stringsAsFactors = F)
fullotutable = t(fullotudata)[,-seq(1,8)]
fullotutable
fullotutable[1,]
fullotutable[2,]
fullotutable[9,]
fullotutable = t(fullotudata)[-c(1,2,3),-seq(1,8)]
fullotutable
fullotutable[1,]
fullotutable = t(fullotudata[-c(1,2,3),-seq(1,8)])
fullotutable[1,]
fullotutable[2,]
head(fullotutable[2,])
head(fullotutable[1,])
head(otutable[1,])
fullotudata[1,fullotudata[2,] == "1D"] = "3-s01d"
colnames(fullotutable) <- fullotudata[-c(1,2,3),1]
head(fullotutable[,])
head(fullotutable[1,])
otutable[,1]
fullotudata[1,-seq(1,8)]
typeof(fullotudata[1,-seq(1,8)])
otutable[,1]
typeof(otutable[,1])
#fullotutable <- sapply(fullotudata[-c(1,2,3),-seq(1,8)],function(x) as.numeric(as.character(x)))
otudf <- as.data.frame(x=otutable[,-1],stringsAsFactors=FALSE,row.names = otutable[,1])
fullotudf =as.data.frame(x = fullotutable,row.names =  otutable[,1],stringsAsFactors = FALSE)
fullotudata
fullotudata[1,2]
fullotudata[10,34]
fullotudata[1,]
#fullotutable <- sapply(fullotudata[-c(1,2,3),-seq(1,8)],function(x) as.numeric(as.character(x)))
otudf <- as.data.frame(x=otutable[,-1],stringsAsFactors=FALSE,row.names = otutable[,1])
otudf
isNumeric(otudf)
isNumeric(fullotudf)
otudf[,]<- sapply(otudf[,], as.numeric)
isNumeric(otudf)
fullotudf[,] <- sapply(fullotudf[,],as.numeric)
colnames(otutable) <- c("ID",t(otudata)[1,-1])
#fullotutable <- sapply(fullotudata[-c(1,2,3),-seq(1,8)],function(x) as.numeric(as.character(x)))
otudf <- as.data.frame(x=otutable[,-1],stringsAsFactors=FALSE,row.names = otutable[,1])
otudf[,]<- sapply(otudf[,], as.numeric)
isNumeric(otudf)
isNumeric(fullotudf)
otufd
otudf
fullotudf
fullotudf[1,]
fullotudf[2,]
View(fullotudf)
# Fullotu cssnormalisation and saving
fullotudf.css = cssnormalisation(fullotudf)
fullotudf.csslog = cssnormalisation(fullotudf,log = T)
fullotudf100s.css = cssnormalisation(fullotudf100s)
fullotudf100s.csslog = cssnormalisation(fullotudf100s,log=T)
write.csv(fullotudf,"fullotudf")
write.csv(fullotudf.css,"fullotudfCss")
write.csv(fullotudf.csslog,"fullotudfCssLog")
write.csv(fullotudf100s,"fullotudf100s")
write.csv(fullotudf100s.css,"fullotudf100sCss")
write.csv(fullotudf100s.csslog,"fullotudf100sCssLog")
?is.na.data.frame()
is.na.data.frame(otudf)
is.na.data.frame(fullotudf)
any(is.na.data.frame(fullotudf))
is.character(otudf)
is.character(fullotudf)
is.double(otudf)
is.int(otudf)
is.integer(otudf)
is.integer(x = otudf)
is.integer(x = otudf.css)
is.double(x = otudf.css)
fullotudf100 = fullotudf[,-(colSums(fullotudf)<100)]
# Three samples with less than 10000 in fullotudf
index_of_fullotu_samples =(rowSums(fullotudf) <10000)
fullotudf100s = fullotudf100[!index_of_fullotu_samples,]
fullotudf100s.css = cssnormalisation(fullotudf100s)
fullotudf100s.csslog = cssnormalisation(fullotudf100s,log=T)
write.csv(fullotudf100s,"fullotudf100s")
write.csv(fullotudf100s.css,"fullotudf100sCss")
write.csv(fullotudf100s.csslog,"fullotudf100sCssLog")
#River dataframe normalisation
riverdf.css = cssnormalisation(riverdf)
sum(cssnormalisation(riverdf[1:100,]) != riverdf.css[1:100,])
sum(cssnormalisation(fullotudf[1:100,]) != fullotudf.css[1:100,])
sum(cssnormalisation(fullotudf[1:100,]) -= fullotudf.css[1:100,])
sum(cssnormalisation(fullotudf[1:100,]) == fullotudf.css[1:100,])
